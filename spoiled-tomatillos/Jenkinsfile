pipeline {
	agent {
		docker {
			image 'kdvolder/mvn-plus-npm'
			args '-v /root/.m2:/root/.m2'
		}
	}
	tools {nodejs "node"}
	stages {
		stage('Build') {
			steps {
				echo "Building"
				sh 'cd spoiled-tomatillos && mvn clean install'
			}
		}
		stage('Test'){
			steps {
				echo "Testing"
				sh 'cd spoiled-tomatillos && mvn test'
			}
		}
		stage('SonarQube') {
			steps {
				withSonarQubeEnv('SonarQube') {
					sh 'cd spoiled-tomatillos && mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.failure.ignore=true'
					sh "cd spoiled-tomatillos && mvn sonar:sonar -Dsonar.host.url=http://ec2-18-220-143-170.us-east-2.compute.amazonaws.com:9000/ -Dsonar.coverage.exclusions=src/main/java/edu/northeastern/cs4500/spoiledtomatillos/movies/Movie.java,src/main/java/edu/northeastern/cs4500/spoiledtomatillos/movies/MovieSearchQuery.java,src/main/java/edu/northeastern/cs4500/spoiledtomatillos/movies/omdb/*,src/main/java/edu/northeastern/cs4500/spoiledtomatillos/user/model/*"
				}
			}
		}
		stage('Quality') {
			steps {
				sh 'sleep 30'
				timeout(time: 30, unit: 'SECONDS') {
					retry(5) {
						script {
							def qg = waitForQualityGate()
							if (qg.status != 'OK') {
								error "Pipeline aborted due to quality gate failure: ${qg.status}"
							}
						}
					}
				}
			}
		}
	}
}
