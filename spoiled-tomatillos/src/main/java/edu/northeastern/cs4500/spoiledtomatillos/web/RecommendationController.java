package edu.northeastern.cs4500.spoiledtomatillos.web;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import edu.northeastern.cs4500.spoiledtomatillos.JsonStrings;
import edu.northeastern.cs4500.spoiledtomatillos.movies.Movie;
import edu.northeastern.cs4500.spoiledtomatillos.movies.MovieCachedRepository;
import edu.northeastern.cs4500.spoiledtomatillos.recommendations.Recommendation;
import edu.northeastern.cs4500.spoiledtomatillos.recommendations.RecommendationRepository;
import edu.northeastern.cs4500.spoiledtomatillos.user.model.User;
import edu.northeastern.cs4500.spoiledtomatillos.user.service.UserServiceImpl;

public class RecommendationController {
	RecommendationRepository recommendationRepository;
	@Autowired
	MovieCachedRepository movieCachedRepository;
	@Autowired
	UserServiceImpl userService;
	
	private class Helper {
		
		ResponseEntity<String> response;
		User sourceUser;
		User targetUser;
		Movie movie;
		String message;
		String recId;
		
		Helper(String strRequest) throws JSONException {
			response = null;
			sourceUser = null;
			targetUser = null;
			movie = null;
			message = null;
			recId = null;
			JSONObject request = new JSONObject(strRequest);
			String sourceEmail = request.getString(JsonStrings.EMAIL);
			String sourceToken = request.getString(JsonStrings.TOKEN);
			String movieId = request.getString(JsonStrings.GROUP_ID);
			// Check if the logged-in user is valid
			if (!User.validLogin(sourceEmail, sourceToken, userService)) {
				response = ResponseEntity.badRequest().body(
						new JSONObject().put(JsonStrings.MESSAGE
								, JsonStrings.INVALID_LOGIN).toString());
			} else {
				sourceUser = userService.findByEmail(sourceEmail);
			}
			// Check if the movie is valid
			Movie localMovie = movieCachedRepository.getMovie(movieId);
			if (localMovie == null) {
				response = ResponseEntity.badRequest().body(
						new JSONObject().put(JsonStrings.MESSAGE
								, JsonStrings.MOVIE_NOT_FOUND).toString());
			} else {
				movie = localMovie;
			}
			// optional target email if this recommendation is being sent 
			// from one user to another user
			if (request.has(JsonStrings.TARGET_EMAIL)) {
				String targetEmail = request.getString(JsonStrings.TARGET_EMAIL);
				User localTargetUser = userService.findByEmail(targetEmail);
				if (localTargetUser != null ) { 
					targetUser = localTargetUser; 
				}	
			}
			// if this is a recommendation from one user to another user,
			// there is an optional "message" from the source user to targetUser
			if (request.has(JsonStrings.REC_MESSAGE)) {
				recId = request.getString(JsonStrings.REC_MESSAGE);
			}
			// if this is handling an existing Recommendation, get its id
			if (request.has(JsonStrings.REC_ID)) {
				recId = request.getString(JsonStrings.REC_ID);
			}
		}
	}
	
	@RequestMapping("/create")
	public ResponseEntity<String> create(@RequestBody(required = true)String request) 
			throws JSONException {
		// Parse the JSON and make sure the items are all valid
		Helper h = new Helper(request);
		// If any errors were generated by the Helper, return them
		if (h.response != null) { return h.response; }
		// Make a Recommendation out of the JSON string
		Recommendation rec = new Recommendation(h.sourceUser, h.movie, h.message);
		// Save the recommendation
		rec = this.recommendationRepository.save(rec);
		// Associate the recommendation with the target user
		h.targetUser.addRecommendation(rec);
		// Save the target user
		this.userService.save(h.targetUser);
		// Return success object (maybe add more things to response?)
		return ResponseEntity.ok().body(new JSONObject()
				.put(JsonStrings.MESSAGE, JsonStrings.SUCCESS).toString());
	}
	
	@RequestMapping("/delete")
	public ResponseEntity<String> delete(@RequestBody(required = true)String request) 
			throws JSONException {
		// Parse the JSON and make sure the items are all valid
		Helper h = new Helper(request);
		// If any errors were generated by the Helper, return them
		if (h.response != null) { return h.response; }
		// Find the recommendation in the repository
		Recommendation rec = recommendationRepository.findOne(h.recId);
		// Delete the recommendation from the user's recommendations
		this.recommendationRepository.delete(rec);
		// Delete the recommendation from the repository
		h.sourceUser.deleteRecommendation(rec);
		// Save the user
		this.userService.save(h.sourceUser);
		// Return success object (maybe add more things to response?)
		return ResponseEntity.ok().body(new JSONObject()
				.put(JsonStrings.MESSAGE, JsonStrings.SUCCESS).toString());
	}
	
	@RequestMapping("/get")
	public ResponseEntity<String> get(@RequestBody(required = true) String request) 
		throws JSONException, JsonProcessingException {
		// Parse the JSON
		Helper h = new Helper(request);
		// If any errors were generated by the Helper, return them
		if (h.response != null) { return h.response;}
		// Return the user's recommendations
		return ResponseEntity.ok().body(
				new ObjectMapper().writeValueAsString(
						h.sourceUser.getRecommendations()));
	}
	
}
